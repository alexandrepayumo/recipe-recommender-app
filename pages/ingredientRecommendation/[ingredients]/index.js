import Head from 'next/head'
import 'bootstrap/dist/css/bootstrap.css'
import styles from '../../../styles/RecipeRecommendation.module.css'
import {useRouter} from 'next/router'
import {useState} from 'react'
import Button from 'react-bootstrap/Button'
import Modal from 'react-bootstrap/Modal'

//Can include a button on each card for info popup or can make the entire card clickable
//Candidate options for info popup:
//Bootstrap collapse, ---> modal <--- , offcanvas, popover, toast
//We can have one modal component. The info varies based on which button is clicked

export default function RecipeRecommendation({data, recipeDetails}) {
  console.log(recipeDetails);
  const [title, setTitle] = useState("Title");
  const [instructions, setInstructions] = useState("instructions");
  const [healthScore, setHealthScore] = useState("100");
  const [sourceURL, setSourceURL] = useState("/");

  const [show, setShow] = useState(false);
  const handleClose = () => setShow(false);
  function handleShow(title, details) {
    setTitle(title);
    let newInstructions = details.instructions;
    newInstructions = newInstructions.replace(/<li>/g, "");
    newInstructions = newInstructions.replace(/<\/li>/g, " ");
    newInstructions = newInstructions.replace(/<ol>/g, "");
    newInstructions = newInstructions.replace(/<\/ol>/g, "");
    newInstructions = newInstructions.replace(/<p>/g, "");
    newInstructions = newInstructions.replace(/<\/p>/g, "");

    setInstructions(newInstructions);
    setHealthScore(details.healthScore);
    setSourceURL(details.sourceUrl);
    setShow(true);
  }
  return (
    <>
      <Head>
        <title>ReciMend</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
      <Modal show={show} onHide={handleClose}>
        <Modal.Header closeButton>
          <Modal.Title>{title}</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <p><span className="bold">Health Score: </span>{healthScore}</p>
          <p><span className="bold">Instructions: </span>{instructions}</p>
          <p><span className="bold">Source URL: </span>{sourceURL}</p>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={handleClose}>
            Close
          </Button>
          {/* Can maybe add a button here that lets the user save the recipe to a different page
          <Button variant="primary" onClick={handleClose}>
            Save Changes
  </Button>*/}
        </Modal.Footer>
      </Modal>
        <div id={styles.heading}>
          <h1>Recommended Recipes</h1>
          <p>We believe that you will love these delicious recipes!</p>
        </div>
        <div className="d-flex flex-wrap justify-content-center">
        {
          data.map((x, index) => <div className="card" key={x.title} id="newCard">
            <img src={x.image} alt={x.title}></img>
            <div className="card-body">
                <h5 className="card-title">{x.title}</h5>
                {/*<p className="card-text">hello</p>*/}
            </div>
            <button className="btn btn-dark" onClick={() => handleShow(x.title, recipeDetails[index])} type="button" data-bs-toggle="modal" data-bs-target="#exampleModal" id={styles.viewButton}>View</button>
          </div>)
        }
        </div>
      </main>
    </>
  )
}

export async function getServerSideProps(context) {
  //WE SHOULD FETCH THE DATA FOR EACH FRUIT HERE INSTEAD OF DOING IT CLIENT SIDE
  let ingredients = context.params;
  ingredients = ingredients.ingredients;
  ingredients = ingredients.replace(",",",+");
  //should i hide the api key? should i post it on github? whattt?
  //below is an api call to fetch recipes
  const res = await fetch(`https://api.spoonacular.com/recipes/findByIngredients?apiKey=${process.env.APIKEY}&query=pasta&ingredients=${ingredients}&number=6`);
  const data = await res.json();
  let recipeDetails = [];
  for (let i = 0; i < data.length; i++) {
    let details = await fetch(`https://api.spoonacular.com/recipes/${data[i].id}/information?apiKey=${process.env.APIKEY}&includeNutrition=false`);
    let detailsData = await details.json();
    recipeDetails.push(detailsData);
  }
  //console.log(data);
  //App doesn't work at the moment because max of 150 api calls per day
  if (data.status == 'failure') {
    console.log("Failure: this website cannot only make 150 API calls per day");
  }
  return {
    props: {
      data, recipeDetails
    }
  }
}